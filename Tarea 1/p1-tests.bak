#lang play
(require "t1.rkt")

; Tests parse
(test (parse '10) {num 10})

(test (parse 'x) {id 'x})

(test (parse '#t) {bool #t})

(test (parse '{! #t}) {unop not (bool #t)})
(test (parse '{! 10}) {unop not (num 10)})
(test (parse '{add1 10}) {unop add1 (num 10)})
(test (parse '{add1 #f}) {unop add1 (bool #f)})
(test (parse '{sub1 10}) {unop sub1 (num 10)})
(test (parse '{sub1 #t}) {unop sub1 (bool #t)})

(test (parse '{+ 10 10}) {binop + (num 10) (num 10)})
(test (parse '{+ #f 10}) {binop + (bool #f) (num 10)})
(test (parse '{+ 10 #t}) {binop + (num 10) (bool #t)})
(test (parse '{+ #t #f}) {binop + (bool #t) (bool #f)})

(test (parse '{- 10 10}) {binop - (num 10) (num 10)})
(test (parse '{- #f 10}) {binop - (bool #f) (num 10)})
(test (parse '{- 10 #t}) {binop - (num 10) (bool #t)})
(test (parse '{- #t #f}) {binop - (bool #t) (bool #f)})

(test (parse '{* 10 10}) {binop * (num 10) (num 10)})
(test (parse '{* #f 10}) {binop * (bool #f) (num 10)})
(test (parse '{* 10 #t}) {binop * (num 10) (bool #t)})
(test (parse '{* #t #f}) {binop * (bool #t) (bool #f)})

(test (parse '{/ 10 10}) {binop / (num 10) (num 10)})
(test (parse '{/ #f 10}) {binop / (bool #f) (num 10)})
(test (parse '{/ 10 #t}) {binop / (num 10) (bool #t)})
(test (parse '{/ #t #f}) {binop / (bool #t) (bool #f)})

(test (parse '{&& 10 10}) {binop (parse-binop '&&) (num 10) (num 10)})
(test (parse '{&& #f 10}) {binop (parse-binop '&&)  (bool #f) (num 10)})
(test (parse '{&& 10 #t}) {binop (parse-binop '&&)  (num 10) (bool #t)})
(test (parse '{&& #t #f}) {binop (parse-binop '&&)  (bool #t) (bool #f)})

(test (parse '{= 10 10}) {binop = (num 10) (num 10)})
(test (parse '{= #f 10}) {binop = (bool #f) (num 10)})
(test (parse '{= 10 #t}) {binop = (num 10) (bool #t)})
(test (parse '{= #t #f}) {binop = (bool #t) (bool #f)})

(test (parse '{< 10 10}) {binop < (num 10) (num 10)})
(test (parse '{< #f 10}) {binop < (bool #f) (num 10)})
(test (parse '{< 10 #t}) {binop < (num 10) (bool #t)})
(test (parse '{< #t #f}) {binop < (bool #t) (bool #f)})

(test (parse '{if #t #f #t}) (if (bool #t) (bool #f) (bool #t)))
(test (parse '{if #t #f 10}) (if (bool #t) (bool #f) (num 10)))
(test (parse '{if #t 10 #t}) (if (bool #t) (num 10) (bool #t)))
(test (parse '{if #t 10 10}) (if (bool #t) (num 10) (num 10)))
(test (parse '{if 10 #f #t}) (if (num 10) (bool #f) (bool #t)))
(test (parse '{if 10 #f 10}) (if (num 10) (bool #f) (num 10)))
(test (parse '{if 10 10 #t}) (if (num 10) (num 10) (bool #t)))
(test (parse '{if 10 10 10}) (if (num 10) (num 10) (num 10)))

(test (parse '{with {{x 10}} x}) {with (list (list (id 'x) (num 10))) (id 'x)})
(test (parse '{with {{x 10} {y 20}} x}) {with (list (list (id 'x) (num 10)) (list (id 'y) (num 20))) (id 'x)})
(test (parse '{with {{x #t}} x}) {with (list (list (id 'x) (bool #t))) (id 'x)})
(test (parse '{with {{x 10} {y #f}} x}) {with (list (list (id 'x) (num 10)) (list (id 'y) (bool #f))) (id 'x)})
(test (parse '{with {} 20}) {with '() (num 20)})

(test (parse '{add 10 20 30}) {app (id 'add) (list (num 10) (num 20) (num 30))})
(test (parse '{sub 10}) {app (id 'sub) (list (num 10))})
(test (parse '{foo}) {app (id 'foo) '()})